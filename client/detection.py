import requests
import os
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import shutil
import yaml

class FileChangeHandler(FileSystemEventHandler):
    def __init__(self):
        super(FileChangeHandler, self).__init__()

    def on_created(self, event):
        if not event.is_directory:
            file_path = event.src_path
            current_dir = os.path.join(os.getcwd(), file_path)
            perform_yara_detection(file_path, current_dir)

def perform_yara_detection(file_path, current_dir):
    if os.path.basename(file_path).startswith("fp"):
        # Apabila file berawal dengan "fp" maka file tidak akan dilakukan scanning
        return
    
    current_dir = current_dir
    api = 'https://captainmalware.pharmalink.id/'
    yara_detect_url = f'{api}/yaradetect'

    # Load the config.yaml file
    with open('./captain-malware/client/config.yaml') as f:
        config_data = yaml.safe_load(f)

    # Mendapatkan Email Admin dari Config yaml yang sudah digenerate dari menjalankan init.py
    admin_emails = config_data.get('admin_emails', [])
    
    with open(file_path, 'rb') as file:
        yara_detect_files = {'file': file}
        yara_detect_response = requests.post(yara_detect_url, files=yara_detect_files, data={'current_dir': current_dir, 'admin_email': admin_emails})
        
        # Print Response dari API pada CLI
        print_api_response(yara_detect_response.text)

        if 'Detected types:' in yara_detect_response.text:
            quarantine_dir = os.path.join(os.getcwd(), 'quarantine') # Set Absolut Path untuk digunakan nantinya pada Pembuatan Folder Karantina

            # Membuat Folder Quarantine
            if not os.path.exists(quarantine_dir):
                os.makedirs(quarantine_dir)
                os.chmod(quarantine_dir, 0o000)
            
            # Close File
            file.close()

            # Pindah File Malware ke Directory Karantina
            new_filepath = os.path.join(quarantine_dir, os.path.basename(file_path))
            shutil.move(file_path, new_filepath)
            print(f"File moved to quarantine: {new_filepath}")

def print_welcome_message():
    print("\n")
    print("\033[1;35m╭───────────────────────────────────────────────────╮")
    print("│          ╭────  CAPTAIN  MALWARE ────╮            │")
    print("╞═══════════════════════════════════════════════════╡")
    print("│   Actively Watching Your Directory for Malware    │")
    print("╞═══════════════════════════════════════════════════╡")
    print("╰───────────────────────────────────────────────────╯\033[0m")

def print_api_response(response):
    lines = response.splitlines()
    max_length = max(len(line) for line in lines)
    print("\n")
    print("\033[1;35m╭─" + "─" * max_length + "─╮")
    print("│  ╭────  API RESPONSE  ─────╮  │")
    print("╞════════════════════════════╡")

    for line in lines:
        padding = max_length - len(line)
        print("│  {}{}  │".format(line, " " * padding))

    print("╰─" + "─" * max_length + "─╯\033[0m")

    
def main():
    with open('./captain-malware/client/config.yaml') as f:
        config_data = yaml.safe_load(f)
    
    directory = config_data.get('directory', '')
    event_handler = FileChangeHandler()
    observer = Observer()
    observer.schedule(event_handler, path=directory, recursive=True)
    print_welcome_message()
    observer.start()
    
    try:
        while True:
            pass
    except KeyboardInterrupt:
        observer.stop()
    observer.join()

if __name__ == '__main__':
    main()