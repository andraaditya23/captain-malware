import yaml
import sys
import subprocess
import os

def install_required_packages():
    try:
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'])
    except subprocess.CalledProcessError as e:
        print(f"Failed to install required packages: {e}")
        sys.exit(1)

def create_captain_malware_script():
    print(sys.platform)
    if sys.platform.startswith('win'):
        # Windows OS
        script_file_path = '../captain-malware.bat'
        script_content = 'start /B python ./captain-malware/client/detection.py\n'
        script_content += 'start /B python ./captain-malware/client/retrieve.py'
    elif sys.platform.startswith('linux'):
        # Linux OS
        script_file_path = '../captain-malware.sh'
        script_content = '#!/bin/bash\n'
        script_content += '''
        ps -ef | grep "python3 ./captain-malware/client/detection.py" | grep -v grep | awk '{print $2}' | xargs kill 2>/dev/null
        ps -ef | grep "python3 ./captain-malware/client/retrieve.py" | grep -v grep | awk '{print $2}' | xargs kill 2>/dev/null
        '''
        script_content += 'python3 ./captain-malware/client/detection.py &\n'
        script_content += 'python3 ./captain-malware/client/retrieve.py &'
        # python3 ./captain-malware/client/detection.py"""
    else:
        # Unsupported OS
        print('Unsupported operating system')
        return

    with open(script_file_path, 'w') as f:
        f.write(script_content)
        
    # Set executable permission for Linux
    if sys.platform.startswith('linux'):
        os.chmod(script_file_path, 0o755)


def create_config_yaml():
    admin_emails = []
    more_emails = True
    
    os.system('cls' if os.name == 'nt' else 'clear')  # Clear the screen
    reinput = "y"
    while reinput.lower() == 'y':
        while more_emails:
            admin_email = input("Please Input Admin Emails (ALERT): ")
            admin_emails.append(admin_email)
            
            choice = input("Do you want to add more email? (y/n): ")
            if choice.lower() != 'y':
                more_emails = False
        
        root_directory = input("Please Input Root HTML folder (e.g., 'html'): ")
        directory = os.path.join(os.getcwd(), '..', root_directory)
        quarantine = os.path.join(os.getcwd(), '..', "quarantine")
        
        # Print the collected admin emails and input summary
        print("\n╭" + "─" * 50 + "╮")
        print("│" + " " * 11 + "╭────  Input Summary  ─────╮" + " " * 11 + "│")
        print("╞" + "═" * 50 + "╡")
        print("│" + " "  * 50 +  "│")

        index = 1
        for email in admin_emails:
            print(f"│   Email {index}   : {email}")
            index += 1
        print("│" + " "  * 50 +  "│")
        print("╞" + "═" * 50 + "╡")
        print("│" + " "  * 50 +  "│")
        print(f"│   Root Dir  : ./{root_directory}")
        print("│" + " "  * 50 +  "│")
        print("╰" + "─" * 50 + "╯")
        
        print("\nPLEASE DOUBLE CHECK IF EVERYTHING IS CORRECT")
        reinput = input("\nINCASE OF WRONG INPUT, DO YOU WANT TO RE-INPUT? (y/n): ")
        if reinput.lower() == 'y':
            admin_emails = []  # Delete the admin_emails list for re-input
            more_emails = True  # Reset more_emails flag for re-input

            if reinput == "y":
                admin_emails = []
                more_emails = True 
    
    
    # Check if quarantine directory exists
    if not os.path.exists(quarantine):
        # Create the directory
        os.makedirs(quarantine)
        print("Quarantine directory created successfully!")
    else:
        print("Quarantine directory already exists.")
        
    config_data = {
        'admin_emails': admin_emails,
        'directory': directory,
        'quarantine' : quarantine,
    }
    
    config_file_path = './client/config.yaml'
    
    with open(config_file_path, 'w') as f:
        yaml.dump(config_data, f)


def main():
    install_required_packages()
    create_captain_malware_script()
    create_config_yaml()

if __name__ == '__main__':
    main()
